version: '3.7'
services:
  db:
    image: postgres:16-alpine
    container_name: booking_db
    env_file:
      - .env-prod
    ports:
      - 5436:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  redis:
    image: redis:7
    container_name: booking_redis

  booking:
    build:
      context: .
    container_name: booking_app
    env_file:
      - .env-prod
    command: ["/booking/docker/app.sh"]
    ports:
      - 7777:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
         condition: service_started
    restart: always


  celery:
    build:
      context: .
    container_name: booking_celery
    command: ["/booking/docker/celery.sh"]
    env_file:
      - .env-prod
    depends_on:
      - redis

  flower:
    build:
      context: .
    container_name: booking_flower
    command: [ "/booking/docker/flower.sh"]
    env_file:
      - .env-prod
    depends_on:
      - redis
    ports:
      - 5555:5555


  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    restart: unless-stopped
    ports:
      - 9090:9090

  grafana:
      image: grafana/grafana:9.4.7
      container_name: grafana
      volumes:
        - grafanadata:/var/lib/grafana
      restart: unless-stopped
      ports:
        - 3000:3000

volumes:
  postgresdata:
  grafanadata:
  prometheusdata:

